package com.yaDsp.logger;

import java.io.File;
import java.io.FileOutputStream;
import java.io.OutputStreamWriter;
 
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;
import java.util.stream.Collectors;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

 
import com.yaDsp.material.MaterialReader;
import com.yaDsp.util.ConfigManager;
import com.yaDsp.util.DateFormatterUtil;
 

public class LogSystem {
	static long maxFileSize;
	static String logPath;

	private static Logger logger = LoggerFactory
		   	.getLogger(LogSystem.class);
	static public void writeLog(String logType, Object[] item) {
		synchronized (syncRoot) {
			if (!temp.containsKey(logType)) {
				temp.put(logType, new ArrayList<Object[]>());
			}
			temp.get(logType).add(item);
		}
	}

	static public void init() {
		maxFileSize = 50 * 1024 * 1024;
		logPath = "/work/log";

		maxFileSize = ConfigManager.GetLong("log.maxFileSize");
		logPath = ConfigManager.Get("log.logPath");

		temp = new HashMap<String, ArrayList<Object[]>>();
		timer = new Timer();
		timer.scheduleAtFixedRate(new TimerTask() {
			public void run() {
				writeToDisk();
			}
		}, 0, 15 * 1000);
	}

	static void writeToDisk() {
		HashMap<String, ArrayList<Object[]>> toWrite;

		synchronized (syncRoot) {
			toWrite = temp;
			temp = new HashMap<String, ArrayList<Object[]>>();
		}

		toWrite.keySet().stream().forEach((name) -> {
			String fname = getTempFileFullName(name);
			File f = new File(fname);
			if (f.exists()) {
				if (f.length() > maxFileSize) {
					String newName = getLogFileFullName(name);
					f.renameTo(new File(newName));
				}
			}

			OutputStreamWriter writer = null;
			try {
				f = new File(fname);
				if (!f.getParentFile().exists()) {
					f.getParentFile().mkdirs();
				}
				if (!f.exists())
					f.createNewFile();
				writer = new OutputStreamWriter(new FileOutputStream(fname, true), "UTF-8");
				ArrayList<Object[]> data = toWrite.get(name);
				for (Object[] item : data) {
					List<String> strArray = Arrays.stream(item).map(e -> {
						if (e != null) {
							if (e instanceof Date) {
								return DateFormatterUtil.formatDate((Date) e, "yyyyMMddHHmmss");
							}
							return e.toString(); // 如果需要加入格式化
						} else {
							return "";
						}
					}).collect(Collectors.toList());

					String line = String.join("\t", strArray);
					writer.write(line);
					writer.write("\n");
				}
				;
			} catch (Exception e) {
				  logger.error(e.getMessage());
			} finally {
				try {
					writer.close();
				} catch (Exception e) {
					// logger.error(e.getMessage());
				}
			}
		});
	}

	static String getFolder() {
		SimpleDateFormat format = new SimpleDateFormat("yyyyMMdd");
		String date = format.format(new Date());
		return logPath + "/" + date;
	}

	static String getTempFileFullName(String logType) {
		return getFolder() + "/" + logType + ".tmp";
	}

	static String getLogFileFullName(String logType) {
		SimpleDateFormat format = new SimpleDateFormat("yyyyMMddHHmmss");
		String date = format.format(new Date());
		return getFolder() + "/" + logType + "." + date + ".tsv";
	}

	static Object syncRoot = new Object();
	static HashMap<String, ArrayList<Object[]>> temp;
	static Timer timer;

}
