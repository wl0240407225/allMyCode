package com.yaDsp.strategy;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.yaDsp.util.Database;
 

public class DbStrategyConfigProvider implements StrategyConfigProvider{

	private static Logger logger = LoggerFactory.getLogger(DbStrategyConfigProvider.class);
	 
 
	//private GroupStrategyConfig gsc=new GroupStrategyConfig();
	
	@Override
	public List<GroupStrategyConfig> getGroupStrategyConfig() {
		ResultSet rs = null;
		PreparedStatement pstmt = null;
		String sql = "SELECT * FROM strategy_config WHERE enabled = 1";
		List<GroupStrategyConfig> config = new ArrayList<>();
		try {
			pstmt = Database.getInstance().getConnection()
					.prepareStatement(sql);
			rs = pstmt.executeQuery();
			while (rs.next()) {
				GroupStrategyConfig model = new GroupStrategyConfig();
				model.setExecutionRate(rs.getDouble("execution_rate"));
				model.setGroupName(rs.getString("group_name"));
			//	model.setSpringUtil(gsc.getSpringUtil());
				model.setFilterStrategies(Arrays.asList(rs.getString("filter_strategy").split(",")));
				model.setPrioprityStrategies(Arrays.asList(rs.getString("prioty_strategy").split(",")));
				model.setFilterRules(Arrays.asList(rs.getString("filter_rules").split(",")));
				config.add(model);
			}
		} catch (SQLException e) {
			logger.error("查询数据异常:{}", e.getMessage());
		} finally {
			Database.colseResult(rs);
			Database.colsePstmt(pstmt);
			Database.getInstance().closeConnection();
		}
		return config;
	}	
}